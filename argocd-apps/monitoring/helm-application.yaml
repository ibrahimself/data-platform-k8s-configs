# argocd-apps/monitoring/helm-application.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-stack
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: data-platform
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 56.6.2
    helm:
      releaseName: prometheus-stack
      # Since values.yaml is in your git repo, you'll need to paste the content here
      values: |
        # Prometheus Stack Configuration for Data Platform
        
        # Prometheus Operator
        prometheusOperator:
          enabled: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          nodeSelector:
            node-group: system

        # Prometheus
        prometheus:
          enabled: true
          serviceAccount:
            create: true
            name: prometheus
            # Uncomment and update if using AWS IRSA for S3 remote write
            # annotations:
            #   eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/prometheus-s3-access"
          
          prometheusSpec:
            # Storage
            retention: 30d
            retentionSize: "50GB"
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: gp2  # Update based on your storage class
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 100Gi
            
            # Resources
            resources:
              requests:
                cpu: 500m
                memory: 2Gi
              limits:
                cpu: 2000m
                memory: 4Gi
            
            # Node selection
            nodeSelector:
              node-group: system
            
            # External labels for federation/remote write
            externalLabels:
              cluster: "data-platform"
              environment: "production"
              region: "eu-west-3"
            
            # Service discovery
            serviceMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelector: {}
            ruleSelectorNilUsesHelmValues: false
            ruleSelector: {}
            podMonitorSelectorNilUsesHelmValues: false
            podMonitorSelector: {}

        # Grafana
        grafana:
          enabled: true
          
          # Admin credentials - CHANGE IN PRODUCTION!
          adminPassword: "changeme123!"
          
          service:
            type: ClusterIP
            port: 80
          
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          
          persistence:
            enabled: true
            storageClassName: gp2
            size: 10Gi
          
          nodeSelector:
            node-group: system
          
          # Sidecar for dashboard/datasource discovery
          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard
              labelValue: "1"
              provider:
                foldersFromFilesStructure: true
            datasources:
              enabled: true
              defaultDatasourceEnabled: true
              label: grafana_datasource
              labelValue: "1"
          
          # Grafana configuration
          grafana.ini:
            server:
              root_url: "%(protocol)s://%(domain)s/grafana"
              serve_from_sub_path: true
            security:
              admin_user: admin
            users:
              allow_sign_up: false
              auto_assign_org: true
              auto_assign_org_role: Viewer
            auth.anonymous:
              enabled: false

        # AlertManager
        alertmanager:
          enabled: true
          alertmanagerSpec:
            storage:
              volumeClaimTemplate:
                spec:
                  storageClassName: gp2
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 10Gi
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 256Mi
            retention: 720h
            nodeSelector:
              node-group: system
          
          # Basic AlertManager config - update with your notification channels
          config:
            global:
              resolve_timeout: 5m
            route:
              group_by: ['alertname', 'cluster', 'service']
              group_wait: 10s
              group_interval: 10s
              repeat_interval: 1h
              receiver: 'default-receiver'
              routes:
              - match:
                  severity: critical
                receiver: 'critical-receiver'
            receivers:
            - name: 'default-receiver'
              # Add your notification config here
            - name: 'critical-receiver'
              # Add critical notification config here

        # Enable all exporters
        nodeExporter:
          enabled: true
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi

        kubeStateMetrics:
          enabled: true
          nodeSelector:
            node-group: system

        # Enable monitoring for all Kubernetes components
        coreDns:
          enabled: true
        kubeApiServer:
          enabled: true
        kubeControllerManager:
          enabled: true
        kubeEtcd:
          enabled: true
        kubeScheduler:
          enabled: true
        kubelet:
          enabled: true

        # Enable default Prometheus rules
        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: true
            general: true
            k8s: true
            kubeApiserver: true
            kubeApiserverAvailability: true
            kubeApiserverSlos: true
            kubelet: true
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            node: true
            prometheus: true
            prometheusOperator: true