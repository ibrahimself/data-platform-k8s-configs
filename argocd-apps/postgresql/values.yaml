# argocd-apps/postgresql/values.yaml
# PostgreSQL configuration for Data Platform

# Global PostgreSQL settings
global:
  postgresql:
    auth:
      postgresPassword: "postgres123!"  # CHANGE IN PRODUCTION!
      database: "postgres"

# PostgreSQL Image
image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 16.3.0-debian-12-r0
  pullPolicy: IfNotPresent

# Authentication
auth:
  enablePostgresUser: true
  postgresPassword: "postgres123!"  # CHANGE IN PRODUCTION!
  database: "dataplatform"
  
  # Additional databases and users
  # These will be created automatically
  username: "dataplatform"
  password: "dataplatform123!"  # CHANGE IN PRODUCTION!

# Architecture configuration
architecture: standalone

# Primary database configuration
primary:
  # Resource allocation
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  
  # Persistence
  persistence:
    enabled: true
    storageClass: "gp2"  # Update based on your storage class
    size: 50Gi
    
  # Init scripts to create additional databases
  initdb:
    scripts:
      init.sql: |
        -- Create Airflow database and user
        CREATE USER airflow WITH PASSWORD 'airflow';
        CREATE DATABASE airflow OWNER airflow;
        GRANT ALL PRIVILEGES ON DATABASE airflow TO airflow;
        
        -- Create Dremio metadata database (if using PostgreSQL for Dremio metadata)
        CREATE USER dremio WITH PASSWORD 'dremio';
        CREATE DATABASE dremio_metadata OWNER dremio;
        GRANT ALL PRIVILEGES ON DATABASE dremio_metadata TO dremio;
        
        -- Create Superset database (for future use)
        CREATE USER superset WITH PASSWORD 'superset';
        CREATE DATABASE superset OWNER superset;
        GRANT ALL PRIVILEGES ON DATABASE superset TO superset;
        
        -- Create MLflow database (for future use)
        CREATE USER mlflow WITH PASSWORD 'mlflow';
        CREATE DATABASE mlflow OWNER mlflow;
        GRANT ALL PRIVILEGES ON DATABASE mlflow TO mlflow;

  # PostgreSQL configuration
  configuration: |
    # Connection settings
    listen_addresses = '*'
    max_connections = 200
    
    # Memory settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    work_mem = 4MB
    
    # WAL settings
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    
    # Query tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_statement = 'all'
    log_duration = on
    log_line_prefix = '%m [%p] %q%u@%d '
    log_timezone = 'UTC'
    
    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min

  # Service configuration
  service:
    type: ClusterIP
    port: 5432

  # Node selector
  nodeSelector: {}
    # node-group: data

# Metrics and monitoring
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    labels:
      prometheus: kube-prometheus-stack
  prometheusRule:
    enabled: false

# Volume permissions
volumePermissions:
  enabled: false

# Service Account
serviceAccount:
  create: true
  name: postgresql

# Security Context
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true

podSecurityContext:
  enabled: true
  fsGroup: 1001

# Backup configuration (using pg_dump)
backup:
  enabled: false
  # Configure if you want automated backups
  # cronjob:
  #   schedule: "0 2 * * *"
  #   storage:
  #     size: 10Gi