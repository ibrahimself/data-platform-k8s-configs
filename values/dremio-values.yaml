# Dremio Enterprise Values - Following Official Structure
# Based on Dremio 26.x documentation

# License Configuration (Required)
dremio:
  license: "eyJraWQiOiI4MGZhMjgxYzZhZjczNDNkNTE1YTVhMzg1MDg1N2RhNmE2YmEzMTU3NWE5ZjVlZmVhMmQ4MTkyMGUyM2Q2OGY0IiwiYWxnIjoiRVMyNTYifQ.eyJpc3MiOiJEcmVtaW8iLCJzdWIiOiIwMDM1ZDAwMDA3TFRkT0VBQTEiLCJuYmYiOjE3NTI3ODA0NzYsImV4cCI6MTc1NTU0NTI3NiwiaWF0IjoxNzUyNzgwNDc2LCJqdGkiOiIxNzUyNzgwNDc2MDYyVzJjciJ9.u8bxfpQvyieeGn3H8RNIyKqbIgHR4pYO0mfBDBh23WJJw58t2WsDEhbOL6rUdfyGu4hItUtcohCoSEXMaAAolg"
  
  # Enterprise Edition image
  image:
    repository: quay.io/dremio/dremio-enterprise

# Image Pull Secrets
imagePullSecrets:
  - dremio-pull-secret

# Coordinator Configuration
coordinator:
  # Production resources
  resources:
    requests:
      cpu: 32
      memory: 64Gi
    limits:
      memory: 64Gi
  
  # Storage
  volumeSize: 512Gi
  
  # Scale-out coordinators (0 = only primary)
  count: 0
  
  # Web UI Configuration
  web:
    auth:
      enabled: true
      type: "internal"  # Change to azuread, ldap, oauth as needed
    tls:
      enabled: false
  
  # Client Configuration
  client:
    tls:
      enabled: false
  
  # Flight Configuration  
  flight:
    tls:
      enabled: false

# Distributed Storage Configuration (REQUIRED)
# Choose one of: aws, azureStorage, or gcp
# Distributed Storage Configuration - Using MinIO
distStorage:
  type: "aws"  # MinIO is S3-compatible
  aws:
    bucketName: "dremio-dist-storage"
    path: "/"
    authentication: "accessKeySecret"
    credentials:
      accessKey: "minioadmin"
      secret: "minioadmin123"
    # Extra properties for MinIO
    extraProperties: |
      <property>
        <name>fs.s3a.endpoint</name>
        <value>http://minio.minio.svc.cluster.local:9000</value>
      </property>
      <property>
        <name>fs.s3a.path.style.access</name>
        <value>true</value>
      </property>
      <property>
        <name>dremio.s3.compat</name>
        <value>true</value>
      </property>

# Enterprise Catalog Configuration - Using MinIO
catalog:
  externalAccess:
    enabled: true
  
  storage:
    type: "S3"
    location: "s3://dremio-catalog/catalog"
    
    s3:
      region: "us-east-1"  # Default region for MinIO
      # For MinIO, we'll use access keys instead of IAM roles
      useAccessKeys: true
      
    # Additional MinIO configuration
    extraProperties: |
      <property>
        <name>fs.s3a.endpoint</name>
        <value>http://minio.minio.svc.cluster.local:9000</value>
      </property>
      <property>
        <name>fs.s3a.path.style.access</name>
        <value>true</value>
      </property>

# Service Configuration
service:
  type: LoadBalancer  # or ClusterIP if using Ingress
  sessionAffinity: true  # Important for scale-out coordinators
  # For AWS EKS in Auto Mode
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

# Ingress Configuration (Optional)
ingress:
  enabled: true
  className: nginx
  hosts:
    - host: dremio.yourdomain.com  # CHANGE THIS
      paths:
        - /
  tls:
    - secretName: dremio-tls
      hosts:
        - dremio.yourdomain.com

# Production Resources Configuration
opensearch:
  enabled: true
  resources:
    requests:
      memory: 16Gi
      cpu: 2
  volumeSize: 100Gi
  replicas: 3

mongodb:
  resources:
    requests:
      memory: 4Gi
      cpu: 8
  volumeSize: 512Gi
  replicas: 3

zookeeper:
  resources:
    requests:
      memory: 1Gi
      cpu: 500m
  volumeSize: 10Gi
  count: 3

nats:
  resources:
    requests:
      memory: 1Gi
      cpu: 700m

catalog:
  resources:
    requests:
      memory: 8Gi
      cpu: 4

catalogExternalAccessServer:
  resources:
    requests:
      memory: 8Gi
      cpu: 4

catalogServiceServer:
  resources:
    requests:
      memory: 8Gi
      cpu: 4

engineOperator:
  resources:
    requests:
      memory: 1Gi
      cpu: 1

# Engine Configuration (New Engines)
engine:
  options:
    resourceAllocationOffsets:
      defaultOffset: reserve-2-8

# Telemetry
telemetry:
  enabled: true

# Global metadata (optional)
labels: {}
annotations: {}
tolerations: []
nodeSelector: {}