# Prometheus Stack Configuration for Data Platform

# Global settings
global:
  evaluation_interval: 30s
  scrape_interval: 30s

# Prometheus Operator
prometheusOperator:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  # Remove node selector if you don't have node-group labels
  # nodeSelector:
  #   node-group: system

# Prometheus
prometheus:
  enabled: true
  
  prometheusSpec:
    # Enable path-based routing
    externalUrl: /prometheus
    routePrefix: /prometheus
    
    # Storage
    retention: 30d
    retentionSize: "50GB"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2  # Update based on your storage class
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi
    
    # Resources
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    # External labels for federation/remote write
    externalLabels:
      cluster: "data-platform"
      environment: "production"
      region: "eu-west-3"
    
    # Service discovery - monitor everything
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}
    ruleNamespaceSelector: {}
    
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}

# Grafana
grafana:
  enabled: true
  
  # Admin credentials - CHANGE IN PRODUCTION!
  adminPassword: "changeme123!"
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 999m
      memory: 2Gi
  
  persistence:
    enabled: true
    storageClassName: gp2
    size: 10Gi
  
  # Sidecar for dashboard/datasource discovery
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      searchNamespace: ALL
      provider:
        foldersFromFilesStructure: true
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      label: grafana_datasource
      labelValue: "1"
  
  # Grafana configuration for subpath
  grafana.ini:
    server:
      domain: localhost  # Update with your domain
      root_url: "%(protocol)s://%(domain)s/grafana"
      serve_from_sub_path: true
    security:
      admin_user: admin
    users:
      allow_sign_up: false
      auto_assign_org: true
      auto_assign_org_role: Viewer
    auth.anonymous:
      enabled: false
    analytics:
      check_for_updates: false

# AlertManager
alertmanager:
  enabled: true
  
  alertmanagerSpec:
    # Enable path-based routing
    externalUrl: /alertmanager
    routePrefix: /alertmanager
    
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 256Mi
    
    retention: 720h
  
  # Basic AlertManager config
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'default-receiver'
      routes:
      - match:
          severity: critical
        receiver: 'critical-receiver'
    receivers:
    - name: 'default-receiver'
      # Add webhook_configs, email_configs, etc.
    - name: 'critical-receiver'
      # Add critical notification config

# Node Exporter
nodeExporter:
  enabled: true
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

# Kube State Metrics
kubeStateMetrics:
  enabled: true

# Enable monitoring for all Kubernetes components
kubeApiServer:
  enabled: true
kubeControllerManager:
  enabled: false  # Usually not accessible in managed k8s
kubeEtcd:
  enabled: false  # Usually not accessible in managed k8s
kubeScheduler:
  enabled: false  # Usually not accessible in managed k8s
kubeProxy:
  enabled: true
kubelet:
  enabled: true
coreDns:
  enabled: true

# Prometheus Node Exporter
prometheus-node-exporter:
  hostRootFsMount:
    enabled: false  # Set to true if you need host filesystem metrics

# Default Prometheus Rules
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false  # Disable if using managed k8s
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false  # Disable if using managed k8s
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# Additional scrape configs (optional)
additionalPrometheusRulesMap: {}
additionalServiceMonitors: []